{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}


  {% unless product.has_only_default_variant %}
    {{ 'component-product-variant-picker.css' | asset_url | stylesheet_tag }}
    {{ 'component-swatch-input.css' | asset_url | stylesheet_tag }}
    {{ 'component-swatch.css' | asset_url | stylesheet_tag }}
  {% endunless %}
  {%- if product.quantity_price_breaks_configured? -%}
    {{ 'component-volume-pricing.css' | asset_url | stylesheet_tag }}
  {%- endif -%}
{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

.catalog-grid .order:nth-child(2n) .order__item:first-child {

  order: 2;
}
{%- endstyle -%}


<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }} catalog-grid">
  {% comment %} product loop {% endcomment %}
  <div class="page-width">
    {%- for product in collection.products -%}

      {%- assign product_form_id = 'product-form-' | append: product.id -%}

      <div class="grid order">
        <div class="grid__item order__item">
          <div class="product-details">
            <h3>{{ product.title | escape }}</h3>

            <div class="product-price">
              <p><strong>Retail Price:</strong> <span id="variant-price-{{ product.id }}">{{ product.variants.first.price | money }}</span></p>
            </div>

            <div class="product-desc">
              {{ product.description }}
            </div>

            <div class="variants">
              {%- assign color_option = '' %}
              {%- assign size_option = '' %}

              {%- for option in product.options_with_values -%}
                {%- if option.name == "Color" -%}
                  {%- assign color_option = option.values -%}
                {%- elsif option.name == "Size" -%}
                  {%- assign size_option = option.values -%}
                {%- endif -%}
              {%- endfor -%}

              <!-- Render Color Options -->
              <div class="color-options">
                <h4>Choose a Color</h4>
                {%- for color in color_option -%}
                  <label for="color-{{ product.id }}-{{ color }}" class="variant-option">
                    <input 
                      type="radio" 
                      name="color-option-{{ product.id }}" 
                      id="color-{{ product.id }}-{{ color }}" 
                      value="{{ color }}"
                      data-color="{{ color }}">
                    {{ color }}
                  </label>
                {%- endfor -%}
              </div>

              <!-- Render Size Options -->
              <div class="size-options">
                <h4>Choose a Size</h4>
                {%- for size in size_option -%}
                  <label for="size-{{ product.id }}-{{ size }}" class="variant-option">
                    <input 
                      type="radio" 
                      name="size-option-{{ product.id }}" 
                      id="size-{{ product.id }}-{{ size }}" 
                      value="{{ size }}"
                      data-size="{{ size }}">
                    {{ size }}
                  </label>
                {%- endfor -%}
              </div>
            </div>

            <div class="variant-info">
              <p><strong>Inventory:</strong> <span id="variant-inventory-{{ product.id }}">{{ product.variants.first.inventory_quantity }}</span> in stock</p>
              <p><strong>SKU:</strong> <span id="variant-sku-{{ product.id }}">{{ product.variants.first.sku }}</span></p>
              <p><strong>Available for Sale:</strong> <span id="variant-availability-{{ product.id }}">{{ product.variants.first.available | yesno }}</span></p>
              <p><strong>Weight:</strong> <span id="variant-weight-{{ product.id }}">{{ product.variants.first.weight }} {{ product.variants.first.weight_unit }}</span></p>
            </div>
          </div>
        </div>

        <div class="grid__item order__item">
          <div class="product-images">
            <!-- Featured image of the product -->
            <img id="product-image-{{ product.id }}-hold" 
                 class="product-image" 
                 src="{{ product.featured_image | img_url: 'large' }}" 
                 alt="{{ product.title }}">
          </div>
        </div>
      </div>

      <!-- JavaScript for updating product details dynamically when a variant is selected -->
      <script>
        document.addEventListener('DOMContentLoaded', function() {
          // Function to set the initial variant data (pre-select first available variant)
          function setInitialVariantData(productId) {
            const firstAvailableVariant = {{ product.variants | json }}.find(function(variant) {
              return variant.available;
            });

            if (firstAvailableVariant) {
              // Pre-select the color and size radio buttons
              const colorOption = firstAvailableVariant.options[0];
              const sizeOption = firstAvailableVariant.options[1];

              // Pre-select the correct color and size radio buttons
              document.querySelector(`input[name="color-option-${productId}"][value="${colorOption}"]`).checked = true;
              document.querySelector(`input[name="size-option-${productId}"][value="${sizeOption}"]`).checked = true;

              updateProductInfo(productId, firstAvailableVariant);
            }
          }

          // Function to update product info dynamically
          function updateProductInfo(productId, selectedVariant) {
            if (!selectedVariant) return;

            // Update price
            const price = selectedVariant.price | money;
            document.getElementById('variant-price-' + productId).innerText = price;

            console.log(price);

            // Update inventory
            const inventory = selectedVariant.inventory_quantity;
            document.getElementById('variant-inventory-' + productId).innerText = inventory;

            // Update SKU
            const sku = selectedVariant.sku;
            document.getElementById('variant-sku-' + productId).innerText = sku;

            // Update availability
            const availability = selectedVariant.available ? 'Yes' : 'No';
            document.getElementById('variant-availability-' + productId).innerText = availability;

            // Update weight
            const weight = selectedVariant.weight;
            const weightUnit = selectedVariant.weight_unit;
            document.getElementById('variant-weight-' + productId).innerText = weight + ' ' + weightUnit;

            // Update the product image
            const imageUrl = selectedVariant.featured_image ? selectedVariant.featured_image | img_url: 'large' : "{{ product.featured_image | img_url: 'large' }}";
            document.getElementById('product-image-' + productId + '-hold').src = imageUrl;
          }

          // Listen for changes on color options
          document.querySelectorAll('input[name="color-option-{{ product.id }}"]').forEach(function (colorInput) {
            colorInput.addEventListener('change', function () {
              const selectedColor = this.value;
              const selectedSize = document.querySelector(`input[name="size-option-{{ product.id }}"]:checked`)?.value;

              const selectedVariant = {{ product.variants | json }}.find(function (variant) {
                return variant.options[0] === selectedColor && variant.options[1] === selectedSize;
              });

              updateProductInfo({{ product.id }}, selectedVariant);
            });
          });

          // Listen for changes on size options
          document.querySelectorAll('input[name="size-option-{{ product.id }}"]').forEach(function (sizeInput) {
            sizeInput.addEventListener('change', function () {
              const selectedSize = this.value;
              const selectedColor = document.querySelector(`input[name="color-option-{{ product.id }}"]:checked`)?.value;

              const selectedVariant = {{ product.variants | json }}.find(function (variant) {
                return variant.options[0] === selectedColor && variant.options[1] === selectedSize;
              });

              updateProductInfo({{ product.id }}, selectedVariant);
            });
          });

          // Set initial data for the first available variant
          setInitialVariantData({{ product.id }});
        });
      </script>

    {%- endfor -%}
  </div>
</div>

{% schema %}
{
  "name": "Collection Catalog",
  "class": "section",
  "settings": [
    
  
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__3.content"
    },
   
  
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
